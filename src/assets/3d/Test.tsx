/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 earth.gltf 
Author: PatelDev (https://sketchfab.com/PatelDev)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/earth-f7a76c63ff1846afb2d606e5c8369c15
Title: Earth
*/

import { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useLoader } from "@react-three/fiber";

import * as THREE from "three";
import { TextureLoader } from "three";

export default function GLTFModel(props: any) {
  const texture = useLoader(TextureLoader, `/textures/${props.name}.jpeg`);

  const ref = useRef<THREE.Mesh>(null!);
  useFrame((_, delta) => {
    if (ref.current) {
      ref.current.rotation.y += delta * props.speed;

      // ref.current.position.x += Math.cos(state.clock.elapsedTime) * 0.02;
      const currentPosition = ref.current.position;

      const newX =
        currentPosition.x +
        (props.posX - currentPosition.x) * Math.cos(132) * 0.02;
      const newY =
        currentPosition.y +
        (props.posY - currentPosition.y) * Math.cos(1) * 0.02;
      const newZ =
        currentPosition.z +
        (props.posZ - currentPosition.z) * Math.cos(1) * 0.02;

      ref.current.position.set(newX, newY, newZ);
    }
  });

  const sphere = new THREE.IcosahedronGeometry(1, 12);

  return (
    <>
      <mesh
        scale={props.scale}
        geometry={sphere}
        position={[-15.2, -1, -1.4]}
        ref={ref}
      >
        {/* <primitive object={gltf.scene} position={[0, 0, 0]} /> */}
        <meshStandardMaterial map={texture} />
      </mesh>
    </>
  );
}

useGLTF.preload("/mars.gltf");
